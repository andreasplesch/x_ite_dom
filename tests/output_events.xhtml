<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>x3d script vs. dom script</title>

		<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
		<meta http-equiv="Pragma" content="no-cache"/>
		<meta http-equiv="Expires" content="0"/>
		<meta charset="utf-8"/>
		<script type="text/javascript" 
			src="https://rawgit.com/create3000/cobweb/master/cobweb.js/cobweb.uncompressed.js">
		</script>
		<script type="text/javascript" 
			src="../cobweb/cobweb_dom.js">
		</script>
		<link rel="stylesheet" type="text/css"
			href="https://rawgit.com/create3000/cobweb/master/cobweb.js/cobweb.css"/>

<style>
html, body {
	margin: 0px;
	padding: 0px;
	border: 0px;
	width: 100%;
	height: 100%;
	overflow: hidden;
}

body {
}

X3DCanvas {
	background: #414141;
	width: 500px;
	height: 400px;
}

.fallback {
	display: block;
	margin: 300px 0 0 0;
	text-align: center;
}
</style>

<script>
	var mover = document.querySelector('[DEF="move"]');
	mover.addEventListener('x3dPositionInterpolator_value_changed', snapBall);
	/**
	 * Uses the values of a PositionInterpolator to move another ball,
	 * but instead of just routing the values, round the y component.
	 * Thus the second ball moves like he is snapping to an invisible raster
	 */
	function snapBall(eventObject)
	{
		//Check if type and output of the eventObject are correct
		//There may be multiple eventObjects but only one of them contains the value we need
		//if(eventObject.type != "outputchange" || eventObject.fieldName != "value_changed")
		//	return;
		
		//Get the value...
		var value = eventObject.detail.value;
		//...and create a copy with the manipulated coordinates
		//var newPos = new x3dom.fields.SFVec3f(2, Math.round(value.y), 0);
		var newY = Math.round(value.y);
		var newPos = "2 " + newY + " 0";
	
		//Set the newly created array as new position for the second ball
		document.getElementById("ball2").setAttribute('translation', newPos.toString());
		
		//Show debug information (of course the data can be used to control non x3dom-objects, too)
		document.getElementById("posInterp").innerHTML = Math.round(value.y*100)/100;
		document.getElementById("posSnaped").innerHTML = newY;
	}
</script>

</head>
<body>

<h1>Animate Objects with X3DOM!</h1>
<p>
    Learn how to manipulate objects using values from the output of other objects.
</p>

<div>
Y-Position of output field (routed to red ball): <span id="posInterp"></span><br/>
Calculated Y-Position (set directly to blue ball): <span id="posSnaped"></span>
</div>
<X3DCanvas>
<X3D width='500px' height='400px'>
    <Scene>
        <Transform DEF="ball" translation='-2 0 0'>
        <Shape>
            <Appearance>
                <Material diffuseColor='1 0 0'></Material>
            </Appearance>
            <Sphere></Sphere>
        </Shape>
        </Transform>
        
        <Transform DEF="ball2" translation='2 0 0' id="ball2">
        <Shape>
            <Appearance>
                <Material diffuseColor='0 0 1'></Material>
            </Appearance>
            <Sphere></Sphere>
        </Shape>
        </Transform>

        <TimeSensor DEF="time" cycleInterval="4" loop="true"></TimeSensor>
        <PositionInterpolator DEF="move" key="0 0.5 1" keyValue="-2 -2.5 0  -2 2.5 0  -2 -2.5 0"></PositionInterpolator>
        
        <ROUTE fromNode="time" fromField ="fraction_changed" toNode="move" toField="set_fraction"></ROUTE>
        <ROUTE fromNode="move" fromField ="value_changed" toNode="ball" toField="translation"></ROUTE>
    </Scene>
</X3D>
</X3DCanvas>

</body>
</html>
