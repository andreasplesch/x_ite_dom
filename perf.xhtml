<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>dom access for cobweb</title>

		<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
		<meta http-equiv="Pragma" content="no-cache"/>
		<meta http-equiv="Expires" content="0"/>
		<meta charset="utf-8"/>
		<!--link rel="stylesheet" type="text/css" href="https://rawgit.com/create3000/cobweb/master/stable/1/1.26/cobweb.css"/-->
		<link rel="stylesheet" type="text/css" href="./cobweb/cobweb.css"/>
		<!--script type="text/javascript" src="./cobweb/APcobweb.1.26.js"></script-->
		<script type="text/javascript" 
		src="https://rawgit.com/andreasplesch/cobweb/master/stable/latest/cobweb.js">
		</script>
		<script type="text/javascript" src="./cobweb/cobweb_dom.js"></script>
		<!--script type="text/javascript"
		src="https://raw.githubusercontent.com/andreasplesch/cobweb_dom/2f26ebf9f8afa13b30b7eff6b2d1db2e7c3accdb/cobweb/cobweb_dom.js"
		></script-->
		
<style id="jsbin-css">
html, body {
	margin: 0px;
	padding: 0px;
	border: 0px;
	width: 100%;
	height: 100%;
	overflow: hidden;
}

body {
	background: black;
	color: white;
}

X3D {
	background: #414141;
	width: 600px;
	height: 400px;
}

.fallback {
	display: block;
	margin: 300px 0 0 0;
	text-align: center;
}
</style>
</head>
<body>
	<button onclick='random_color()'>new color</button>
	<button onclick='add_box()'>new box</button>
	<button onclick='remove_last_box()'>remove box</button>
	<button onclick='remove_last_material()'>remove material</button>
	
		<!--X3DCanvas url='"http://www.web3d.org/x3d-resources/content/examples/Basic/ChemicalMarkupLanguage/VitaminK.x3d"'-->
		<X3D id='dummy'>
	<Scene>
		 
		<Transform translation='2 0 0'>
			<TouchSensor DEF='ts1'></TouchSensor>
				<Shape>
				<!-- When attribute values are not specified, the default values from the X3D (or VRML) Specification are used. -->
					<Appearance>
						<Material></Material>
					</Appearance>
					<Box></Box>
				</Shape>
		</Transform>
		
		<Transform id='shell'>
		</Transform>
	</Scene>
			<p class="fallback">
				Your browser may not support all features required by Cobweb! You can use Firefox, <br/>
				because this is currently the choice of the choice. We will continuously keep you informed <br/>
				on technical developments and as soon as Cobweb is running in other browser too.
			</p>
		</X3D>
<div id='report'>mouse over coordinates: <span id='coords'></span></div>
<div id='report'>hit point coordinates: <span id='hitpoint'></span></div>
</body>
<script>
console.log('START')

//try out x3d events on touchsensor
ts = document.querySelector('TouchSensor');
coords = document.querySelector('#coords');
hitpt = document.querySelector('#hitpoint');

///*
ts.addEventListener('isOver', function(evt) {
	if (evt.value) {
		coords.textContent = " " + evt.fields.hitPoint_changed;
		//alert('isOver event:'+evt.value+'\nHitPoint: '+evt.fields.hitPoint_changed)
	}
	});
ts.addEventListener('hitPoint_changed', function(evt) {
	if (evt.value) {
		hitpt.textContent = " " + evt.value;
		//alert('isOver event:'+evt.value+'\nHitPoint: '+evt.fields.hitPoint_changed)
	}
	});
//*/

var box_counter = 0;
var radius = 4;
var perBoxAngle = 2*Math.PI/12;

function random_color() {
	
	var m = document.querySelector("Material")
	//will be transferred to scene graph node 
	m.setAttribute("diffuseColor", Math.random()+" "+Math.random()+" "+Math.random());
	console.log(m);
}

function add_box() {

	var transform = document.createElement('Transform');
	transform.setAttribute('translation', radius * Math.cos(perBoxAngle * box_counter) + " " + radius * Math.sin(perBoxAngle * box_counter++) + " " + 0);
	var shape = document.createElement('Shape');
	var app = document.createElement('Appearance');
	var mat = document.createElement('Material');
	var box = document.createElement('Box');
	var shell = document.querySelector('Scene');
	app.appendChild(mat);
	shape.appendChild(app);
	shape.appendChild(box);
	transform.appendChild(shape);
	shell.appendChild(transform);
	radius = radius + box_counter/100;
}

function remove_last_box() {

	var trafos = document.querySelectorAll("Transform");
	var last_trafo = trafos[trafos.length - 1];
	last_trafo.remove();
	box_counter--;
	radius = radius - box_counter/100;

}

function remove_last_material() {

	var mats = document.querySelectorAll("Material");
	var last_mat = mats[mats.length - 1];
	last_mat.remove();
}


</script>

</html>
