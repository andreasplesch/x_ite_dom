---
---
<!DOCTYPE html PUBLIC "-//W3C//DTD XHTML 1.0 Transitional//EN"
"http://www.w3.org/TR/xhtml1/DTD/xhtml1-transitional.dtd">

<html xmlns="http://www.w3.org/1999/xhtml">
	<head>
		<title>dom access for cobweb</title>

		<meta http-equiv="Cache-Control" content="no-cache, no-store, must-revalidate"/>
		<meta http-equiv="Pragma" content="no-cache"/>
		<meta http-equiv="Expires" content="0"/>
		<meta charset="utf-8"/>
		<script type="text/javascript" 
			src="https://cdn.rawgit.com/create3000/x_ite/latest/dist/x_ite.js">
		</script>
		<script type="text/javascript" 
			src="./src/x_ite_dom.js">
		</script>
		<link rel="stylesheet" type="text/css"
			href="https://cdn.rawgit.com/create3000/x_ite/latest/dist/x_ite.css"/>

<style >
html, body {
	margin: 10px;
	padding: 0px;
	border: 0px;
	width: 100%;
	height: 100%;
	_overflow: hidden;
}

body {
	background: slategrey;
	color: white;
}

X3DCanvas {
	background: #414141;
	width: 600px;
	height: 400px;
}

.fallback {
	display: block;
	margin: 300px 0 0 0;
	text-align: center;
}
a {
	background: yellow;
]
</style>
</head>
<body>
	<h1> x_cite via the DOM </h1>
	
	<X3DCanvas>
<X3D>
	<Scene>
		<Viewpoint description='default'></Viewpoint>
		<Viewpoint description='fromBack' position='0 0 -10' orientation='0 1 0 3.1415'></Viewpoint>
		<Transform translation='2 0 0'>
			<TouchSensor DEF='ts1'></TouchSensor>
				<Shape>
				<!-- When attribute values are not specified, the default values from the X3D (or VRML) Specification are used. -->
					<Appearance>
						<Material></Material>
					</Appearance>
					<Box></Box>
				</Shape>
		</Transform>
		
		<Transform id='shell'>
		</Transform>
	</Scene>
</X3D>
			<p class="fallback">
				Your browser may not support all features required by Cobweb! You can use Firefox, <br/>
				because this is currently the choice of the choice. We will continuously keep you informed <br/>
				on technical developments and as soon as Cobweb is running in other browser too.
			</p>
</X3DCanvas>
<div>
	<button onclick='random_color()'>new color</button>
	<button onclick='add_box()'>new box</button>
	<button onclick='remove_last_box()'>remove box</button>
	<button onclick='remove_last_material()'>remove material</button>
	<button onclick='toggle_Viewpoint()'>toggle view</button>
	<button onclick='reset_Viewpoint()'>reset view</button>
</div>
	<div> xhtml examples  :
		<ol>
		{% for example in site.static_files %}
		  {% if example.extname == '.xhtml' %}
		    {% if example.path contains 'tests/' %}	
		      <li><a href="{{ site.github.url }}{{example.path}}"> {{example.name}} </a></li>
		    {% endif %}
		  {% endif %}
		{% endfor %}
		</ol>
	</div>
	<div> html5 examples  :
		<ol>
		{% for example in site.static_files %}
		  {% if example.extname == '.html' %}
		    {% if example.path contains 'tests/' %}	
		      <li><a href="{{ site.github.url }}{{example.path}}"> {{example.name}} </a></li>
		    {% endif %}
		  {% endif %}
		{% endfor %}
		</ol>
	</div>
</body>
<script>
console.log('START')

var box_counter = 0;
var radius = 4;
var perBoxAngle = 2*Math.PI/12;

var viewpointNodes=document.querySelectorAll("Viewpoint");
var v_i = 0;

function reset_Viewpoint () {
	X3D.getBrowser("X3DCanvas").bindViewpoint(viewpointNodes[v_i%2].x3d);
}

function toggle_Viewpoint () {
	viewpointNodes[++v_i%2].setAttribute("set_bind","true");
}

function random_color() {
	
	var m = document.querySelector("Material")
	//will be transferred to scene graph node 
	m.setAttribute("diffuseColor", Math.random()+" "+Math.random()+" "+Math.random());
	console.log(m);
}

function add_box() {

	var transform = document.createElement('Transform');
	transform.setAttribute('translation', radius * Math.cos(perBoxAngle * box_counter) + " " + radius * Math.sin(perBoxAngle * box_counter++) + " " + 0);
	var shape = document.createElement('Shape');
	var app = document.createElement('Appearance');
	var mat = document.createElement('Material');
	var box = document.createElement('Box');
	var shell = document.querySelector('#shell');
	app.appendChild(mat);
	shape.appendChild(app);
	shape.appendChild(box);
	transform.appendChild(shape);
	shell.appendChild(transform);
	radius = radius + box_counter/100;
}

function remove_last_box() {

	var trafos = document.querySelectorAll("Transform");
	var last_trafo = trafos[trafos.length - 1];
	last_trafo.remove();
	box_counter--;
	radius = radius - box_counter/100;

}

function remove_last_material() {

	var mats = document.querySelectorAll("Material");
	var last_mat = mats[mats.length - 1];
	last_mat.remove();
}

</script>
</html>
